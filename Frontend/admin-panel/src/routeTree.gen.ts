/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrdersIndexRouteImport } from './routes/orders/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as OrdersIdRouteImport } from './routes/orders/$id'
import { Route as EventsIdRouteImport } from './routes/events/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersIndexRoute = OrdersIndexRouteImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersIdRoute = OrdersIdRouteImport.update({
  id: '/orders/$id',
  path: '/orders/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIdRoute = EventsIdRouteImport.update({
  id: '/events/$id',
  path: '/events/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/events/$id': typeof EventsIdRoute
  '/orders/$id': typeof OrdersIdRoute
  '/events': typeof EventsIndexRoute
  '/orders': typeof OrdersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/events/$id': typeof EventsIdRoute
  '/orders/$id': typeof OrdersIdRoute
  '/events': typeof EventsIndexRoute
  '/orders': typeof OrdersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/events/$id': typeof EventsIdRoute
  '/orders/$id': typeof OrdersIdRoute
  '/events/': typeof EventsIndexRoute
  '/orders/': typeof OrdersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/events/$id' | '/orders/$id' | '/events' | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/events/$id' | '/orders/$id' | '/events' | '/orders'
  id: '__root__' | '/' | '/events/$id' | '/orders/$id' | '/events/' | '/orders/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventsIdRoute: typeof EventsIdRoute
  OrdersIdRoute: typeof OrdersIdRoute
  EventsIndexRoute: typeof EventsIndexRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/$id': {
      id: '/orders/$id'
      path: '/orders/$id'
      fullPath: '/orders/$id'
      preLoaderRoute: typeof OrdersIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$id': {
      id: '/events/$id'
      path: '/events/$id'
      fullPath: '/events/$id'
      preLoaderRoute: typeof EventsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventsIdRoute: EventsIdRoute,
  OrdersIdRoute: OrdersIdRoute,
  EventsIndexRoute: EventsIndexRoute,
  OrdersIndexRoute: OrdersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
